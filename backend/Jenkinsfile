pipeline {
  agent any

  environment { // Ï†ÑÏó≠ ÌôòÍ≤ΩÎ≥ÄÏàò Ï†ïÏùò
    IMAGE_REPO = 'xioz19/my-issue' // ÎπåÎìú/Ìë∏ÏãúÌï† Docker Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú.
    COMMIT_SHA = 'manual' // Ïù¥ÎØ∏ÏßÄÏóê Î≤ÑÏ†Ñ ÌÉúÍ∑∏Î°ú Î∂ôÏó¨ÏÑú Ïù¥Î†• Ï∂îÏ†Å Í∞ÄÎä•
    NGINX_HOST = credentials('NGINX_HOST')
    NGINX_USER = credentials('NGINX_USER')
    NGINX_CONF = credentials('NGINX_CONF')
  }

  options {
    timestamps()
    gitLabConnection('my-issue')
  } // Output Î°úÍ∑∏Ïóê ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î∂ôÏó¨Ï§å

  // MR/Push Ïù¥Î≤§Ìä∏ ÏàòÏã†
  triggers {
    gitlab (
      triggerOnPush: true,

      // Î∏åÎûúÏπò ÌïÑÌÑ∞
      branchFilterType: 'NameBasedFilter',
      includeBranchesSpec: 'dev/server',  // push Ïù¥Î≤§Ìä∏: Ïù¥ Î∏åÎûúÏπòÎßå

      // dev/server Î∏åÎûúÏπòÏóê ÎåÄÌï¥ÏÑúÎßå ÎπåÎìú Ìä∏Î¶¨Í±∞
      targetBranchRegex: 'dev/server'
    )
  }

  stages {
    stage('Checkout') { // GitLab ÏóêÏÑú ÏΩîÎìú Í∞ÄÏ†∏Ïò¥
      steps {
        checkout scm

        script {
          // Î∏åÎûúÏπò/Ïª§Î∞ã Ï†ïÎ≥¥ ÏÑ∏ÌåÖ Î∞è Î°úÍπÖ
          env.COMMIT_SHA = sh(returnStdout: true, script: 'git rev-parse --short=7 HEAD').trim()
          echo "BRANCH_NAME=${env.BRANCH_NAME}, GIT_BRANCH=${env.GIT_BRANCH}, COMMIT_SHA=${env.COMMIT_SHA}"

          gitlabBuilds(builds: [
            '01-Build & Test',
            '02-Docker Build',
            '03-Push to Docker Hub',
            '04-Deploy'
          ]) {
            echo "GitLab job names Îì±Î°ù ÏôÑÎ£å"
          }
        }
      }
    }

    stage('01-Build & Test') {
      steps {
        gitlabCommitStatus(name: '01-Build & Test') {
          dir('backend/my-issue') {
            sh './gradlew clean build -x test'
          }
        }
      }
    }

    stage('02-Docker Build') { // Docker BuildKit ÌôúÏÑ±Ìôî
      when {
        expression { env.BRANCH_NAME == 'dev/server' || env.GIT_BRANCH == 'origin/dev/server' }
      }
      steps {
        gitlabCommitStatus(name: '02-Docker Build') {
          sh '''
            echo "=== Docker Build (backend/my-issue) ==="
            export DOCKER_BUILDKIT=1
            # Ïù¥Ï†Ñ ÎπåÎìú Í≤∞Í≥º Ï∫êÏãúÎ°ú ÌôúÏö©
            docker pull ${IMAGE_REPO}:latest || true

            docker build \
              --pull \
              --cache-from=${IMAGE_REPO}:latest \
              -f backend/my-issue/Dockerfile \
              -t ${IMAGE_REPO}:latest \
              -t ${IMAGE_REPO}:${COMMIT_SHA} \
              backend/my-issue
          '''
          // Dockerfile Í≤ΩÎ°ú ÏßÄÏ†ï -> ÏµúÏã† ÌÉúÍ∑∏Î°úÎèÑ ÎπåÎìú -> Ïª§Î∞ã SHA ÌÉúÍ∑∏Î°úÎèÑ ÎπåÎìú
          // Docker Ïù¥ÎØ∏ÏßÄ 2Í∞ú ÌÉúÍ∑∏Î°ú ÎπåÎçî (latest + Ïª§Î∞ã Î≤ÑÏ†Ñ)
        }
      }
    }

    stage('03-Push to Docker Hub') {
      when {
        expression { env.BRANCH_NAME == 'dev/server' || env.GIT_BRANCH == 'origin/dev/server' }
      }
      steps {
        gitlabCommitStatus(name: '03-Push to Docker Hub') {
          withCredentials([usernamePassword( // JenkinsÏóê Îì±Î°ùÎêú Docker Hub ÌÅ¨Î¶¨Îç¥ÏÖú ÏÇ¨Ïö©
            credentialsId: 'dockerhub-cred',
            usernameVariable: 'DOCKER_USER',
            passwordVariable: 'DOCKER_PASS'
          )]) { // Docker Hub Î°úÍ∑∏Ïù∏/Ìë∏Ïãú/Î°úÍ∑∏ÏïÑÏõÉ
            sh '''
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              docker push ${IMAGE_REPO}:${COMMIT_SHA}
              docker push ${IMAGE_REPO}:latest
              docker logout || true
            '''
          }
        }
      }
    }

    stage('04-Deploy') {
      when {
        expression { env.BRANCH_NAME == 'dev/server' || env.GIT_BRANCH == 'origin/dev/server' }
      }
      steps {
        gitlabCommitStatus(name: '04-Deploy') {
          withCredentials([
            string(credentialsId: 'SPRING_DATASOURCE_URL',      variable: 'SPRING_DATASOURCE_URL'),
            string(credentialsId: 'SPRING_DATASOURCE_USERNAME', variable: 'SPRING_DATASOURCE_USERNAME'),
            string(credentialsId: 'SPRING_DATASOURCE_PASSWORD', variable: 'SPRING_DATASOURCE_PASSWORD'),
            string(credentialsId: 'JWT_SECRET_BASE64', variable: 'JWT_SECRET_BASE64'),
            string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD'),
            string(credentialsId: 'AWS_ACCESS_KEY', variable: 'AWS_ACCESS_KEY'),
            string(credentialsId: 'AWS_SECRET_KEY', variable: 'AWS_SECRET_KEY'),
            string(credentialsId: 'GMS_KEY', variable: 'GMS_KEY'),
            string(credentialsId: 'APP_RECOMMEND_BASE_URL', variable: 'APP_RECOMMEND_BASE_URL'),
            string(credentialsId: 'APP_RECOMMEND_DEFAULT_PARAMS', variable: 'APP_RECOMMEND_DEFAULT_PARAMS'),
            string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN'),
            string(credentialsId: 'ES_URI', variable: 'ES_URI'),
            string(credentialsId: 'ES_USERNAME', variable: 'ES_USERNAME'),
            string(credentialsId: 'ES_PASSWORD', variable: 'ES_PASSWORD'),
            string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY'),
            sshUserPrivateKey(
              credentialsId: 'ec2-ssh-key-pem',
              keyFileVariable: 'SSH_KEY',
              usernameVariable: 'SSH_USER'
            )
          ]) {
            sh '''
              echo "üöÄ Start Deploying ${IMAGE_REPO}:${COMMIT_SHA}"

              # ÏõêÍ≤© ÏÑúÎ≤ÑÏóê secrets ÎîîÎ†âÌÜ†Î¶¨ Î≥¥Ïû•
              ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $SSH_USER@$NGINX_HOST "mkdir -p /home/$SSH_USER/secrets"

              # Firebase secrets ÌååÏùº ÏÉùÏÑ± Î∞è Ï†ÑÏÜ°
              echo "$FIREBASE_TOKEN" > myissue-firebase.json
              scp -o StrictHostKeyChecking=no -i "$SSH_KEY" myissue-firebase.json $SSH_USER@$NGINX_HOST:/home/$SSH_USER/secrets/myissue-firebase.json
              rm -f myissue-firebase.json

              # 1. deploy.sh ÏõêÍ≤© ÏÑúÎ≤ÑÏóê Î≥µÏÇ¨
              scp -o StrictHostKeyChecking=no -i "$SSH_KEY" scripts/deploy.sh $SSH_USER@$NGINX_HOST:/home/$SSH_USER/deploy.sh

              # 2. ÏõêÍ≤© ÏÑúÎ≤ÑÏóêÏÑú Í∂åÌïú Ï£ºÍ∏∞
              ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $SSH_USER@$NGINX_HOST "chmod +x /home/$SSH_USER/deploy.sh"

              # 3. ÏõêÍ≤© ÏÑúÎ≤ÑÏóêÏÑú ÌôòÍ≤ΩÎ≥ÄÏàò Î∂ôÏó¨ Ïã§Ìñâ
              ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$NGINX_HOST" "
                export SPRING_DATASOURCE_URL='$SPRING_DATASOURCE_URL' &&
                export SPRING_DATASOURCE_USERNAME='$SPRING_DATASOURCE_USERNAME' &&
                export SPRING_DATASOURCE_PASSWORD='$SPRING_DATASOURCE_PASSWORD' &&
                export JWT_SECRET_BASE64='$JWT_SECRET_BASE64' &&
                export REDIS_PASSWORD='$REDIS_PASSWORD' &&
                export AWS_ACCESS_KEY='$AWS_ACCESS_KEY' &&
                export AWS_SECRET_KEY='$AWS_SECRET_KEY' &&
                export GMS_KEY='$GMS_KEY' &&
                export APP_RECOMMEND_BASE_URL='$APP_RECOMMEND_BASE_URL' &&
                export APP_RECOMMEND_DEFAULT_PARAMS='$APP_RECOMMEND_DEFAULT_PARAMS' &&
                export ES_URI='$ES_URI' &&
                export ES_USERNAME='$ES_USERNAME' &&
                export ES_PASSWORD='$ES_PASSWORD' &&
                export OPENAI_API_KEY='$OPENAI_API_KEY' &&
                export SPRING_PROFILES_ACTIVE=prod &&
                sudo -E bash /home/ubuntu/deploy.sh ${COMMIT_SHA}
              "
            '''
          }
        }
      }
    }
  }

  // ÎπåÎìú ÏÑ±Í≥µ/Ïã§Ìå® ÌõÑ Ï≤òÎ¶¨
  post {
    success {
      script {
          def authorName = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
          def authorEmail = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
          mattermostSend(
            endpoint: 'https://meeting.ssafy.com/hooks/smhi3szhdirx8mggofg3hwgoxc',
            channel: 'D101-Webhook',
            color: 'good',
            message: "‚úÖ ÎπåÎìú ÏÑ±Í≥µ: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${authorName} (${authorEmail})\n(<${env.BUILD_URL}|Details>)"
          )
        }
        echo "‚úÖ Pushed: ${IMAGE_REPO}:${COMMIT_SHA} & :latest"
        updateGitlabCommitStatus name: 'jenkins/overall', state: 'success'
    }
    failure {
      script {
          def authorName = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
          def authorEmail = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
          mattermostSend(
            endpoint: 'https://meeting.ssafy.com/hooks/smhi3szhdirx8mggofg3hwgoxc',
            channel: 'D101-Webhook',
            color: 'danger',
            message: "‚ùå ÎπåÎìú Ïã§Ìå®: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${authorName} (${authorEmail})\n(<${env.BUILD_URL}|Details>)"
          )
        }
        updateGitlabCommitStatus name: 'jenkins/overall', state: 'failed'
    }
    always  { sh 'docker image prune -f || true' }
  }

}
