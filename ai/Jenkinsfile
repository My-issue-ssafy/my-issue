pipeline {
	agent any
  options { timestamps(); disableConcurrentBuilds(); gitLabConnection('my-issue') }

  environment {
		IMAGE_REPO = 'xioz19/my-issue-py'
    TAG = 'manual' // CheckoutÏóêÏÑú Ïª§Î∞ã SHAÎ°ú ÎçÆÏñ¥ÏîÄ
  }

  triggers {
		gitlab(
      triggerOnPush: true,
      branchFilterType: 'NameBasedFilter',
      includeBranchesSpec: 'dev/data'
    )
  }

  stages {
		stage('Checkout') {
			steps {
				gitlabCommitStatus(name: 'Checkout') {
					checkout scm
					script {
						env.TAG = sh(returnStdout: true, script: "bash -lc 'git rev-parse --short=7 HEAD'").trim()
						echo "COMMIT_SHA=${env.TAG}"
					}
				}
      }
    }

    stage('Docker Build & Push') {
			steps {
				gitlabCommitStatus(name: 'Docker Build & Push') {
					withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
						dir('ai/fastapi') {
							sh '''
								bash -lc '
									set -Eeuo pipefail
									docker build -t ${IMAGE_REPO}:${TAG} -t ${IMAGE_REPO}:latest .
									echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
									docker push ${IMAGE_REPO}:${TAG}
									docker push ${IMAGE_REPO}:latest
									docker logout || true
								'
							'''
						}
					}
				}
      }
    }

    stage('Deploy (Blue/Green)') {
			steps {
				gitlabCommitStatus(name: 'Deploy (Blue/Green)') {
					withCredentials([
						sshUserPrivateKey(credentialsId: 'ec2-ssh-key-pem', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER'),
						string(credentialsId: 'NGINX_HOST', variable: 'NGINX_HOST'),
						string(credentialsId: 'DATABASE_URL', variable: 'DATABASE_URL'),
						file(credentialsId: 'google-service-account', variable: 'GOOGLE_APPLICATION_CREDENTIALS')
					]) {
						sh '''
							bash -lc '
								set -Eeuo pipefail
								echo "üöÄ Deploy Python ${IMAGE_REPO}:${TAG}"
								scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i "$SSH_KEY" scripts/deploy_python.sh "$SSH_USER@$NGINX_HOST:~/deploy_python.sh"

								# SA ÌååÏùº ÏÑúÎ≤ÑÎ°ú Î≥µÏÇ¨
								ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$NGINX_HOST" "sudo mkdir -p /opt/sa && sudo chown $SSH_USER /opt/sa"
								scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i "$SSH_KEY" "GOOGLE_APPLICATION_CREDENTIALS" "$SSH_USER@$NGINX_HOST:/opt/sa/gcp.json"
								ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$NGINX_HOST" "sudo chmod 600 /opt/sa/gcp.json"

								# Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
								ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$NGINX_HOST" "\
									export DATABASE_URL=$(printf %q \"$DATABASE_URL\"); \
									chmod +x ~/deploy_python.sh; \
									sudo --preserve-env=DATABASE_URL -E ~/deploy_python.sh ${TAG} \
								"
							'
						'''
					}
        }
      }
    }
  }

  post {
		success {
			echo "‚úÖ Deployed ${IMAGE_REPO}:${TAG}"
			updateGitlabCommitStatus name: 'Pipeline', state: 'success'
		}
		failure {
			updateGitlabCommitStatus name: 'Pipeline', state: 'failed'
		}
    always  { sh "bash -lc 'docker image prune -f || true'" }
  }
}
